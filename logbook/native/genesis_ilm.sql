create keyspace if not exists logbook with replication = {'class' : 'SimpleStrategy', 'replication_factor' : 3};

# //////////////////////////////////////////////////////////////////////////////////////////////
# recital //////////////////////////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////////////////////////////////

create table cache.boats (
   id blob,
   name text,
   capacity int,
   accessed__ timestamp,
   created__ timestamp,
   gaps__ text,
   cause__ text  
   PRIMARY KEY (id, name));

create table cache.departments (
   id blob,
   name text,
   vk text,
   director blob,
   accessed__ timestamp,
   created__ timestamp,
   gaps__ text,
   cause__ text,
   PRIMARY KEY (id, name));

create table cache.property_types (
   id blob,
   name text,
   description text,  
   accessed__ timestamp,
   created__ timestamp,
   gaps__ text,
   cause__ text,
   PRIMARY KEY (id, name));

create table cache.system_states (
   id blob,
   name text,
   description text,  
   accessed__ timestamp,
   created__ timestamp,
   gaps__ text,
   cause__ text,
   PRIMARY KEY (id, name));

create table cache.system_types (
   id blob,
   name text,
   description text,  
   accessed__ timestamp,
   created__ timestamp,
   gaps__ text,
   cause__ text,
   PRIMARY KEY (id, name));

create table cache.specializations (
   id blob,
   name text,
   accessed__ timestamp,
   created__ timestamp,
   gaps__ text,
   cause__ text,
   PRIMARY KEY (id, name));

create table cache.locations (
   id blob,
   name text,
   accessed__ timestamp,
   created__ timestamp,
   gaps__ text,
   cause__ text,
   PRIMARY KEY (id, name));

create table cache.sensors (
   id blob,
   name text,
   location blob,
   accessed__ timestamp,
   created__ timestamp,
   gaps__ text,
   cause__ text,
   PRIMARY KEY (id, name));

create table cache.systems (
   id blob,
   name text,
   type blob,
   serial_number float,
   launched timestamp,
   checked timestamp,
   supervisor blob,
   state blob,
   accessed__ timestamp,
   created__ timestamp,
   gaps__ text,
   cause__ text,
   PRIMARY KEY (id, name));

create table cache.people (
   id blob,
   name text,
   surname text,
   patronymic text,
   department blob,
   phone text,
   specialization blob,
   accessed__ timestamp,
   created__ timestamp,
   gaps__ text,
   cause__ text,
   PRIMARY KEY (id, name));

create table cache.properties (
   id blob,
   name text,
   type blob,
   admission timestamp,
   comissioning timestamp,
   department blob,
   accessed__ timestamp,
   created__ timestamp,
   gaps__ text,
   cause__ text,
   PRIMARY KEY (id, name));

# //////////////////////////////////////////////////////////////////////////////////////////////
# relations ////////////////////////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////////////////////////////////

create table cache.shifts (
   id blob,
   start timestamp,
   end timestamp,
   department blob,
   chief blob,
   workers text,
   requirements text,
   accessed__ timestamp,
   created__ timestamp,
   gaps__ text,
   cause__ text,
   PRIMARY KEY (id));

create table cache.operations (
   id blob,
   name text,
   start timestamp,
   end timestamp,
   head blob,
   executors text,
   requirements text,
   accessed__ timestamp,
   created__ timestamp,
   gaps__ text,
   cause__ text,
   PRIMARY KEY (id, name));

create table cache.requirements (
   id blob,
   name text,
   content text,
   accessed__ timestamp,
   created__ timestamp,
   gaps__ text,
   cause__ text,
   PRIMARY KEY (id, name));

# //////////////////////////////////////////////////////////////////////////////////////////////
# logbook //////////////////////////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////////////////////////////////

create table cache.system_tests (
   id blob,
   timestamp timestamp,
   system blob,
   result int,
   accessed__ timestamp,
   created__ timestamp,
   gaps__ text,
   cause__ text,
   PRIMARY KEY (id));

create table cache.control_actions (
   id blob,
   timestamp timestamp,
   mac_address blob,
   user blob,
   command text,
   params text,
   result text,
   accessed__ timestamp,
   created__ timestamp,
   gaps__ text,
   cause__ text,
   PRIMARY KEY (id));

create table cache.positions (
   id blob,
   timestamp timestamp,
   x float,
   y float,
   z float,
   speed float,
   attack_angle float,
   direction_angle float,
   accessed__ timestamp,
   created__ timestamp,
   gaps__ text,
   cause__ text,
   PRIMARY KEY (id));

create table cache.sensor_data (
   id blob,
   timestamp timestamp,
   source blob,
   event text,
   meaning text,
   value float,
   units text,
   accessed__ timestamp,
   created__ timestamp,
   gaps__ text,
   cause__ text,
   PRIMARY KEY (id));

create table cache.shift_states (
   id blob,
   timestamp timestamp,
   shift blob,
   warning_level text,
   cartridges int,
   air int,
   electricity int,
   comment text,
   accessed__ timestamp,
   created__ timestamp,
   gaps__ text,
   cause__ text,
   PRIMARY KEY (id));

create table cache.operation_states (
   id blob,
   timestamp timestamp,
   boat blob,
   operation blob,
   status text,
   distance float,
   zenith float,
   azimuth float,
   hydrogenium float,
   helium float,
   lithium float,
   beryllium float,
   borum float,
   carboneum float,
   nitrogenium float,
   oxygenium float,
   fluorum float,
   neon float,
   natrium float,
   magnesium float,
   aluminium float,
   silicium float,
   phosphorus float,
   sulfur float,
   chlorum float,
   argon float,
   kalium float,
   calcium float,
   scandium float,
   titanium float,
   vanadium float,
   chromium float,
   manganum float,
   ferrum float,
   cobaltum float,
   niccolum float,
   cuprum float,
   zincum float,
   gallium float,
   germanium float,
   arsenicum float,
   selenium float,
   bromum float,
   crypton float,
   rubidium float,
   strontium float,
   yttrium float,
   zirconium float,
   niobium float,
   molybdaenum float,
   technetium float,
   ruthenium float,
   rhodium float,
   palladium float,
   argentum float,
   cadmium float,
   indium float,
   stannum float,
   stibium float,
   tellurium float,
   iodium float,
   xenon float,
   caesium float,
   barium float,
   lanthanum float,
   cerium float,
   praseodymium float,
   neodymium float,
   promethium float,
   samarium float,
   europium float,
   gadolinium float,
   terbium float,
   dysprosium float,
   holmium float,
   erbium float,
   thulium float,
   ytterbium float,
   lutetium float,
   hafnium float,
   tantalum float,
   wolframium float,
   rhenium float,
   osmium float,
   iridium float,
   platinum float,
   aurum float,
   hydrargyrum float,
   thallium float,
   plumbum float,
   bismuthum float,
   polonium float,
   astatum float,
   radon float,
   francium float,
   radium float,
   actinium float,
   thorium float,
   protactinium float,
   uranium float,
   neptunium float,
   plutonium float,
   americium float,
   curium float,
   berkelium float,
   californium float,
   einsteinium float,
   fermium float,
   mendelevium float,
   nobelium float,
   lawrencium float,
   rutherfordium float,
   dubnium float,
   seaborgium float,
   bohrium float,
   hassium float,
   meitnerium float,
   darmstadtium float,
   roentgenium float,
   copernicium float,
   nihonium float,
   flerovium float,
   moscovium float,
   livermorium float,
   tennessium float,
   oganesson float,
   comment text,
   accessed__ timestamp,
   created__ timestamp,
   gaps__ text,
   cause__ text,
   PRIMARY KEY (id));
