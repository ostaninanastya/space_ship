 create database store;

# //////////////////////////////////////////////////////////////////////////////////////////////
# recital //////////////////////////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////////////////////////////////

 create table store.boats (
 	_id TINYBLOB, 
 	name VARCHAR(20), 
 	capacity INT, 
 	__created__ DATETIME, 
 	__accessed__ DATETIME, 
 	__gaps__ BLOB, 
 	__cause__ VARCHAR(50), 
 	PRIMARY KEY(_id));

 create table store.property_types (
 	_id TINYBLOB, 
 	name VARCHAR(20),
 	description VARCHAR(100),
 	__created__ DATETIME, 
 	__accessed__ DATETIME, 
 	__gaps__ BLOB, 
 	__cause__ VARCHAR(50),
 	PRIMARY KEY(_id(12)));

 create table store.system_states (
 	_id TINYBLOB, 
 	name VARCHAR(20),
 	description VARCHAR(100),
 	__created__ DATETIME, 
 	__accessed__ DATETIME, 
 	__gaps__ BLOB, 
 	__cause__ VARCHAR(50),
 	PRIMARY KEY(_id(12)));

  create table store.specializations (
 	_id TINYBLOB, 
 	name VARCHAR(20),
 	__created__ DATETIME, 
 	__accessed__ DATETIME, 
 	__gaps__ BLOB, 
 	__cause__ VARCHAR(50),
 	PRIMARY KEY(_id(12)));

create table store.locations (
 	_id TINYBLOB, 
 	name VARCHAR(20),
 	__created__ DATETIME, 
 	__accessed__ DATETIME, 
 	__gaps__ BLOB, 
 	__cause__ VARCHAR(50),
 	PRIMARY KEY(_id(12)));

create table store.sensors (
 	_id TINYBLOB, 
 	name VARCHAR(20),
 	location TINYBLOB,
 	__created__ DATETIME, 
 	__accessed__ DATETIME, 
 	__gaps__ BLOB, 
 	__cause__ VARCHAR(50),
 	PRIMARY KEY(_id(12)));

create table store.systems (
 	_id TINYBLOB, 
 	name VARCHAR(20),
 	type TINYBLOB,
 	serial_number FLOAT,
 	launched DATETIME,
 	checked DATETIME,
 	supervisor TINYBLOB,
 	state TINYBLOB,
 	__created__ DATETIME, 
 	__accessed__ DATETIME, 
 	__gaps__ BLOB, 
 	__cause__ VARCHAR(50),
 	PRIMARY KEY(_id(12)));

create table store.people (
 	_id TINYBLOB, 
 	name VARCHAR(40),
 	surname VARCHAR(40),
 	patronymic VARCHAR(40),
 	department TINYBLOB,
 	phone VARCHAR(20),
 	specialization TINYBLOB,
 	__created__ DATETIME, 
 	__accessed__ DATETIME, 
 	__gaps__ BLOB, 
 	__cause__ VARCHAR(50),
 	PRIMARY KEY(_id(12)));

create table store.departments (
 	_id TINYBLOB, 
 	name VARCHAR(20),
 	vk VARCHAR(100),
 	director TINYBLOB,
 	__created__ DATETIME, 
 	__accessed__ DATETIME, 
 	__gaps__ BLOB, 
 	__cause__ VARCHAR(50), 
 	PRIMARY KEY(_id(12)));

create table store.properties (
 	_id TINYBLOB, 
 	name VARCHAR(20),
 	type TINYBLOB,
 	admission DATETIME,
 	comissioning DATETIME,
 	department TINYBLOB,
 	__created__ DATETIME, 
 	__accessed__ DATETIME, 
 	__gaps__ BLOB, 
 	__cause__ VARCHAR(50), 
 	PRIMARY KEY(_id(12)));

# //////////////////////////////////////////////////////////////////////////////////////////////
# relations ////////////////////////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////////////////////////////////

create table store.shifts (
   _id TINYBLOB,
   start DATETIME,
   end DATETIME,
   department TINYBLOB,
   chief TINYBLOB,
   workers BLOB,
   requirements BLOB,
   __created__ DATETIME,
   __accessed__ DATETIME,
   __gaps__ BLOB,
   __cause__ VARCHAR(50),
   PRIMARY KEY (_id(12)));

create table store.operations (
   _id TINYBLOB,
   name VARCHAR(50),
   start DATETIME,
   end DATETIME,
   head TINYBLOB,
   executors BLOB,
   requirements BLOB,
   __created__ DATETIME,
   __accessed__ DATETIME,
   __gaps__ BLOB,
   __cause__ VARCHAR(50),
   PRIMARY KEY (_id(12)));

create table store.requirements (
   _id TINYBLOB,
   name VARCHAR(50),
   content BLOB,
   __created__ DATETIME,
   __accessed__ DATETIME,
   __gaps__ BLOB,
   __cause__ VARCHAR(50),
   PRIMARY KEY (_id(12)));

# //////////////////////////////////////////////////////////////////////////////////////////////
# logbook //////////////////////////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////////////////////////////////

create table store.system_tests (
   _id TINYBLOB,
   timestamp DATETIME,
   system TINYBLOB,
   result INT,
   __created__ DATETIME,
   __accessed__ DATETIME,
   __gaps__ BLOB,
   __cause__ VARCHAR(50),
   PRIMARY KEY (_id(12)));

create table store.control_actions (
   _id TINYBLOB,
   timestamp DATETIME,
   mac_address TINYBLOB,
   user TINYBLOB,
   command VARCHAR(50),
   params VARCHAR(100),
   result VARCHAR(100),
   __created__ DATETIME,
   __accessed__ DATETIME,
   __gaps__ BLOB,
   __cause__ VARCHAR(50),
   PRIMARY KEY (_id(12)));

create table store.positions (
   _id TINYBLOB,
   timestamp DATETIME,
   x FLOAT,
   y FLOAT,
   z FLOAT,
   speed FLOAT,
   attack_angle FLOAT,
   direction_angle FLOAT,
   __created__ DATETIME,
   __accessed__ DATETIME,
   __gaps__ BLOB,
   __cause__ VARCHAR(50),
   PRIMARY KEY (_id(12)));

create table store.sensor_data (
   _id TINYBLOB,
   timestamp DATETIME,
   source TINYBLOB,
   event VARCHAR(20),
   meaning VARCHAR(20),
   value FLOAT,
   units VARCHAR(10),
   __created__ DATETIME,
   __accessed__ DATETIME,
   __gaps__ BLOB,
   __cause__ VARCHAR(50),
   PRIMARY KEY (_id(12)));

create table store.shift_states (
   _id TINYBLOB,
   timestamp DATETIME,
   shift TINYBLOB,
   warning_level VARCHAR(20),
   cartridges INT,
   electricity INT,
   air INT,
   comment VARCHAR(256),
   __created__ DATETIME,
   __accessed__ DATETIME,
   __gaps__ BLOB,
   __cause__ VARCHAR(50),
   PRIMARY KEY (_id(12)));

create table store.operation_states (
   _id TINYBLOB,
   timestamp DATETIME,
   boat TINYBLOB,
   operation TINYBLOB,
   status VARCHAR(20),
   distance FLOAT,
   zenith FLOAT,
   azimuth FLOAT,
   hydrogenium FLOAT,
   helium FLOAT,
   lithium FLOAT,
   beryllium FLOAT,
   borum FLOAT,
   carboneum FLOAT,
   nitrogenium FLOAT,
   oxygenium FLOAT,
   fluorum FLOAT,
   neon FLOAT,
   natrium FLOAT,
   magnesium FLOAT,
   aluminium FLOAT,
   silicium FLOAT,
   phosphorus FLOAT,
   sulfur FLOAT,
   chlorum FLOAT,
   argon FLOAT,
   kalium FLOAT,
   calcium FLOAT,
   scandium FLOAT,
   titanium FLOAT,
   vanadium FLOAT,
   chromium FLOAT,
   manganum FLOAT,
   ferrum FLOAT,
   cobaltum FLOAT,
   niccolum FLOAT,
   cuprum FLOAT,
   zincum FLOAT,
   gallium FLOAT,
   germanium FLOAT,
   arsenicum FLOAT,
   selenium FLOAT,
   bromum FLOAT,
   crypton FLOAT,
   rubidium FLOAT,
   strontium FLOAT,
   yttrium FLOAT,
   zirconium FLOAT,
   niobium FLOAT,
   molybdaenum FLOAT,
   technetium FLOAT,
   ruthenium FLOAT,
   rhodium FLOAT,
   palladium FLOAT,
   argentum FLOAT,
   cadmium FLOAT,
   indium FLOAT,
   stannum FLOAT,
   stibium FLOAT,
   tellurium FLOAT,
   iodium FLOAT,
   xenon FLOAT,
   caesium FLOAT,
   barium FLOAT,
   lanthanum FLOAT,
   cerium FLOAT,
   praseodymium FLOAT,
   neodymium FLOAT,
   promethium FLOAT,
   samarium FLOAT,
   europium FLOAT,
   gadolinium FLOAT,
   terbium FLOAT,
   dysprosium FLOAT,
   holmium FLOAT,
   erbium FLOAT,
   thulium FLOAT,
   ytterbium FLOAT,
   lutetium FLOAT,
   hafnium FLOAT,
   tantalum FLOAT,
   wolframium FLOAT,
   rhenium FLOAT,
   osmium FLOAT,
   iridium FLOAT,
   platinum FLOAT,
   aurum FLOAT,
   hydrargyrum FLOAT,
   thallium FLOAT,
   plumbum FLOAT,
   bismuthum FLOAT,
   polonium FLOAT,
   astatum FLOAT,
   radon FLOAT,
   francium FLOAT,
   radium FLOAT,
   actinium FLOAT,
   thorium FLOAT,
   protactinium FLOAT,
   uranium FLOAT,
   neptunium FLOAT,
   plutonium FLOAT,
   americium FLOAT,
   curium FLOAT,
   berkelium FLOAT,
   californium FLOAT,
   einsteinium FLOAT,
   fermium FLOAT,
   mendelevium FLOAT,
   nobelium FLOAT,
   lawrencium FLOAT,
   rutherfordium FLOAT,
   dubnium FLOAT,
   seaborgium FLOAT,
   bohrium FLOAT,
   hassium FLOAT,
   meitnerium FLOAT,
   darmstadtium FLOAT,
   roentgenium FLOAT,
   copernicium FLOAT,
   nihonium FLOAT,
   flerovium FLOAT,
   moscovium FLOAT,
   livermorium FLOAT,
   tennessium FLOAT,
   oganesson FLOAT,
   comment VARCHAR(256),
   __created__ DATETIME,
   __accessed__ DATETIME,
   __gaps__ BLOB,
   __cause__ VARCHAR(50),
   PRIMARY KEY (_id(12)));

